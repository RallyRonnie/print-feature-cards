<!DOCTYPE html>
<html>
<head>
    <title>Print Feature Cards</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Tue Dec 29 2015 08:21:55 GMT-0800 (PST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue Dec 29 2015 08:21:55 GMT-0800 (PST)";
        var CHECKSUM = 8479805493;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.CardTemplate',{
    extend: 'Ext.XTemplate',

    constructor: function(config) {

        this.callParent([
            '<div class="artifact">',
                '<div class="r1">',
                    '<tpl if="this.displayFields.r1left>',
                        '<span class="r1left">{[this.getContent(values, this.displayFields.r1left)]}</span>',
                    '</tpl><tpl if="this.displayFields.r1right">',
                        '<span class="r1right">{[this.getContent(values, this.displayFields.r1right)]}</span>',
                    '</tpl>',
                '</div>',
                '<div class="r2">',
                    '<tpl if="this.displayFields.r2left>',
                        '<span class="r2left">{[this.getContent(values, this.displayFields.r2left)]}</span>',
                    '</tpl><tpl if="this.displayFields.r2middle">',
                        '<span class="r2middle">{[this.getContent(values, this.displayFields.r2middle)]}</span>',
                    '</tpl><tpl if="this.displayFields.r2right">',
                        '<span class="r2right">{[this.getContent(values, this.displayFields.r2right)]}</span>',
                    '</tpl>',
                '</div>',
                '<div class="r3">',
                    '<tpl if="this.displayFields.r3middle">',
                        '<span class="r3middle">{[this.getContent(values, this.displayFields.r3middle)]}</span>',
                    '</tpl>',
                '</div>',
                '<div class="r4">',
                    '<tpl if="this.displayFields.r4middle">',
                        '<span class="r4middle">{[this.getContent(values, this.displayFields.r4middle)]}</span>',
                    '</tpl>',
                '</div>',
            '</div>',

            //'<tpl if="this.hasTasks(values)">',
            //'<div class="status-value tasks" title="Manage Tasks">',
            //'<tpl exec="this.percentage = this.getCompletedTaskPercentage(values)"></tpl>',
            //'{[this._buildIcon(values)]}',
            //'<tpl if="this.percentage !== 100">',
            //'<div class="percentage">{[this.percentage]}%</div>',
            //'</tpl>',
            //'<tpl exec="this.toDo = this.getToDo(values)"></tpl>',
            //'<tpl if="this.toDo &gt; 0">',
            //'<tpl exec="this.toDoUnit = this.getToDoUnit()"></tpl>',
            //'<div class="separator">&nbsp;</div>',
            //'<div class="icon-to-do"></div>',
            //'<div class="to-do-value">{[this.toDo]}{[this.toDoUnit]}</div>',
            //'</tpl>',
            //'</div>',
            //'</tpl>',
            {
                getContent: function(recordData, displayField) {
                    console.log('getContent', recordData, displayField)
                    var val = recordData[displayField.dataIndex] || "&nbsp;";
                    if (displayField){
                        if (Ext.isFunction(displayField.dataIndex)){
                            val = displayField.dataIndex(recordData);
                        } else {
                            val = recordData[displayField.dataIndex] || '';
                        }
                        if (displayField.maxLength > 0){
                            val = Ext.String.ellipsis(val, displayField.maxLength);
                        }
                    }
                    console.log('getContent', recordData, displayField, val);
                    return val;
                },
                displayFields: config.displayFields
            }
        ]);
    }
});
Ext.define('Rally.technicalservices.CardDisplayField',{
    dataIndex: undefined,
    maxLength: undefined,
    position: undefined,
    cls: undefined
});

Ext.define('Rally.technicalservices.window.PrintCards',{
    extend: 'Ext.Window',
    logger: new Rally.technicalservices.Logger(),
    truncateText: '...',
    config: {
        title: 'Print Feature Cards',
        records: null,
        styleSheetTitle: "printCards",
        currentDocument: null,
        /**
         *  Array of the following:
         *  dataIndex
         *  maxLength (default 0)
         *  cls (defaults are: card-title, content,
         */
        displayFields: null
    },
    constructor: function(config){
        this.initConfig(config);
    },
    show: function(){
        var options = "toolbar=1,menubar=1,scrollbars=yes,scrolling=yes,resizable=yes,width=1000,height=500";
        var win = window.open('',this.title);

        var html = this._buildCardsHTML();

        win.document.write('<html><head><title>' + this.title + '</title>');
        win.document.write('<style>');
        win.document.write(this._getStyleSheet(this.styleSheetTitle));
        win.document.write('</style>');
        win.document.write('</head><body class="landscape">');
        win.document.write(html);
        win.document.write('</body></html>');
    },
    _buildCardsHTML: function() {

        var html = '';
        var total_cards = this.records.length;
        var card_num = 0;

        var t = Ext.create('Rally.technicalservices.CardTemplate', {
            displayFields: Rally.technicalservices.CardConfiguration.displayFields
        });

        Ext.each(this.records, function(r){

            html += t.apply(r.getData());

            //var value_html = '';
            ////Todo organize by content or header...
            //Ext.each(this.displayFields, function(df){
            //    var value = r.get(df.dataIndex);
            //    df.maxLenth = df.maxLength || 0;
            //    if (df.maxLength > 0 && value.length > df.maxLength){
            //        value = value.substring(0,df.maxLength);
            //        value = value + this.truncateText;
            //    }
            //    value_html += Ext.String.format('<span class="{0}">{1}</span>',df.cls,value);
            //}, this);
            //html += Ext.String.format('<div class="artifact">{0}</div>', value_html);
            //
            card_num ++;
            if ((card_num + 1) % 2 === 0) {
                html += '<div class=pb></div>';
            } else if (card_num === total_cards - 1) {
                html += '<div class=cb>&nbsp;</div>';
            }
        },this);
        //console.log('html',html);
        return html;
    },
    _getStyleSheet: function(styleSheetTitle) {
        this.logger.log('getStyleSheet');
        var styleSheet;
        // var docs = Ext.getDoc();
        var elems = this.currentDocument.query('style');

        for (var i=0; i< elems.length; i++){
            if (elems[i].title == styleSheetTitle){
                styleSheet = elems[i];
            }
        }
        return styleSheet.innerHTML;
    }
});
Ext.define("print-feature-cards", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'message_box',tpl:'Hello, <tpl>{_refObjectName}</tpl>'},
        {xtype:'container',itemId:'display_box'}
    ],

    features: [],
    
    launch: function() {
        this.down('#display_box').add({
            xtype: 'rallybutton',
            text: 'Open Print Cards',
            scope: this,
            handler: this._gatherData
        });
    },
    
    _gatherData: function(){
        var feature_fields = Rally.technicalservices.CardConfiguration.fetchFields;
        
        var promise_functions = [this._loadFeatures];
        
        Deft.Chain.sequence(promise_functions,this).then({
            scope: this,
            success: function(results) {
                this._openPrintCards(results[0]);
            },
            failure: function(msg) {
                Ext.Msg.alert("Problem printing cards", msg);
            }
        });

    },
    
    _loadFeatures: function() {
        var deferred = Ext.create('Deft.Deferred');
        
        var config = {
            model: 'PortfolioItem/Feature',
            fetch: Rally.technicalservices.CardConfiguration.fetchFields
        };
        
        this._loadWsapiRecords(config).then({
            scope: this,
            success: function(features) {
                this.features = features;
                deferred.resolve(features);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });

        return deferred.promise;
    },
    
    _loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };

        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    _openPrintCards: function(records){

        var fields =[{
            dataIndex: 'Name',
            maxLength: 100,
            cls: 'card-title'
        },{
            dataIndex: 'FormattedID',
            cls: 'card-id'
        }];

        var win = Ext.create('Rally.technicalservices.window.PrintCards',{
            records: records,
            displayFields: fields,
            currentDocument: Ext.getDoc()
        });
        win.show();
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this.launch();
    }
});

Ext.define('Rally.technicalservices.CardConfiguration',{
    singleton: true,

    fetchFields: ["FormattedID","Name","State","Owner","InvestmentCategory","Description","Notes","Milestones","TargetDate"],
    displayFields: {
        r1left: {
            dataIndex: function(recordData){
                return recordData.FormattedID + ': ' + recordData.Name;
            },
            maxLength: 40
        },
        r1right: {
            dataIndex: function(recordData){
                if ( Ext.isEmpty(recordData.Milestones) || recordData.Milestones.Count === 0 ) {
                    return "No Entry";
                }
                return (recordData.State && recordData.State.Name) || "No Entry";
            }
        },
        r2left: {
            dataIndex: 'Name',
            maxLength: 20
        },
        r2middle: {
            dataIndex: function(recordData){
                return recordData.Owner && recordData.Owner.DisplayName || "None";
            },
            maxLength: 20
        },
        r2right: {
            dataIndex: 'InvestmentCategory'
        },
        r3middle: {
            dataIndex: 'Description',
            maxLength: 255
        },
        r4middle: {
            dataIndex: 'Notes',
            maxLength: 255
        }
    }
});

            
               Rally.launchApp('print-feature-cards', {
                   name: 'Print Feature Cards'
               });
        });
    </script>
    

<style type="text/css" title="printCards">
/* PLEASE LEAVE THIS STYLESHEET INLINE SINCE TITLE IS NECESSARY */
@media print {
    #interface {
        display: none;
    }

    .pb {
        page-break-after: always;
        clear: both;
    }
}

#interface, #printSection {
    margin: 20px;
}

html {
    background-color: #fff;
    color: #000;
    font: 14pt / 1.26 Arial, Helvetica, sans-serif;
    margin: 0;
    padding: 0;
}

body {
    background-color: #fff;
    margin: 0;
    padding: 0;
}

.cb {
    clear: both;
}

.artifact {
    background-color: #fff;
    border: 2px solid #000;
    float: left;
    height: 3.2in;
    margin: 0.1in 0.1in 0.1in 0.1in;
    position: relative;
    overflow: hidden;
    width: 4.3in;
}
.r1 {
    border: 1px;
    border-bottom-style: solid;
    height: 40px;
    font-family: NotoSans, Helvetica, Arial;
    font-size: 12pt;
    background-color: #6699cc;
    color: #FFFFFF;
}
.r1left {
    display: table-cell;
    padding-top: 0.5em;
    width: 2.8in;
    height: 40px;
    padding-left: 0.5em;
    border-right: 1px solid #000;
}
.r1right {
    display: table-cell;
    padding-top: 0.5em;
    width: 1.5in;
    padding-left: 0.5em;
}
.r2{
    border: 1px;
    border-bottom-style: solid;
    height: 40px;
    font-family: NotoSans, Helvetica, Arial;
    font-size: 10pt;
    background-color: #d9e6f2;
}
.r2left {
    display: table-cell;
    width: 1.3in;
    padding-top: 0.5em;
    padding-left: 0.5em;
    height: 40px;
    border-right: 1px solid #000;
}
.r2middle {
    display: table-cell;
    width: 1.4in;
    padding-top: 0.5em;
    height: 40px;
    padding-left: 0.5em;
    border-right: 1px solid #000;
}
.r2right {
    display: table-cell;
    padding-top: 0.5em;
    padding-left: 0.5em;
    width: 1.5in;
}
.r3{
    border: 1px;
    border-bottom-style: solid;
    height: 120px;
    font-family: NotoSans, Helvetica, Arial;
    font-size: 12pt;
}
.r3middle {
    display: table-cell;
    vertical-align: middle;
    text-align: center;
}
.r4{
    border: 1px;
    border-bottom-style: solid;
    height: 120px;
    font-family: NotoSans, Helvetica, Arial;
    font-size: 12pt;
}
.r4middle {
    display: table-cell;
    vertical-align: middle;
    text-align: center;
}
.header {
    border: 1px;
    border-bottom-style: solid;
    display: table-cell;
    height: 40px;
    vertical-align: middle;
    width: 4.3in;
}

.card-title {
    font: bold 28px Genova, sans-serif;
    padding-top: 0.5em;
    text-align: center;
}

.description {
    float: left;
    font: 12pt Georgia, sans-serif;
    margin: 0.25em auto 0 auto;
    padding-left: 1.0em;
    padding-right: 1.0em;
    overflow-y: hidden;
    width: 100%;
    word-wrap: break-word;
}

.owner {
    float: right;
    height: 40px;
}

.ownerText {
    float: right;
    font: 14pt / 1.26 Arial, Helvetica, sans-serif;
    margin-right: 0.3em;
    margin-top: 0.3em;
}

.card-id {
    float: left;
    font: 14pt / 1.26 Arial, Helvetica, sans-serif;
    margin-left: 0.25em;
    margin-top: 0.3em;
}

.estimate {
    bottom: 0.5em;
    position: absolute;
    right: 0.5em;
}

.content {
    height: 2.4in;
    overflow: hidden;
    width: 4.3in;
}
</style>
.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

</head>
<body></body>
</html>